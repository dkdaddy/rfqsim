openapi: 3.0.3
info:
  title: RFQ Viewer & Interaction Service API
  description: |-
    API for viewing, streaming, and interacting with Requests for Quotes (RFQs) 
    generated by a simulator.
  version: v1.0.0
  contact:
    name: API Support
    email: support@example.com # Placeholder
servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: RFQs
    description: Operations related to Requests for Quotes
  - name: Health
    description: Service health check

components:
  schemas:
    InstrumentDetail:
      type: object
      properties:
        cusip:
          type: string
          description: CUSIP of the instrument.
          example: "912828ABC"
        maturity:
          type: string
          format: date
          description: Maturity date of the instrument.
          example: "2030-12-01"
        currency:
          type: string
          description: Currency of the instrument.
          example: "USD"
        instrumentType:
          type: string
          description: Type of financial instrument.
          example: "GovBond"
        description:
          type: string
          description: Description of the instrument.
          example: "US Treasury Bond 2.5% 2030"

    CustomerDetail:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the customer.
          example: "CUST01"
        shortName:
          type: string
          description: Short name of the customer.
          example: "Demo Bank A"
        tier:
          type: string
          description: Tier of the customer.
          example: "1"

    VenueDetail:
      type: object
      properties:
        venueId:
          type: string
          description: Unique ID of the venue.
          example: "V01"
        name:
          type: string
          description: Name of the venue.
          example: "SimuVenue A"

    RFQ:
      type: object
      properties:
        id:
          type: string
          format: uuid # Or string if not strictly UUID in implementation
          description: Unique identifier for the RFQ.
          example: "RFQ-a1b2c3d4-e5f6-7890-1234-567890abcdef"
        startTime:
          type: string
          format: date-time
          description: When the RFQ becomes active.
          example: "2025-06-01T10:00:00Z"
        timeToLive:
          type: integer
          description: Duration in seconds for which the RFQ is valid.
          example: 300
        instrument:
          $ref: '#/components/schemas/InstrumentDetail'
        customer:
          $ref: '#/components/schemas/CustomerDetail'
        venue:
          $ref: '#/components/schemas/VenueDetail'
        size:
          type: number
          format: double # Or integer if always whole numbers
          description: Quantity or amount of the instrument.
          example: 1000000
        settlementDate:
          type: string
          format: date
          description: The date on which the trade, if executed, would settle.
          example: "2025-06-05"
        status:
          type: string
          enum: [New, "On the Wire", Passed, Lapsed]
          description: Current state of the RFQ.
          example: "New"
        respondingTraderId:
          type: string
          nullable: true
          description: Identifier of the trader who has actioned this RFQ.
          example: "TRADER007"

    RfqResponseActionRequest:
      type: object
      required:
        - traderId
        - responseType
      properties:
        traderId:
          type: string
          description: Identifier of the trader performing the action.
          example: "TRADER_UI_001"
        responseType:
          type: string
          enum: [STREAM_PRICE, FIXED_PRICE]
          description: Type of response being made.
          example: "FIXED_PRICE"
        priceDetails:
          type: object
          properties:
            price:
              type: number
              format: double
              description: The price being offered.
              example: 100.50
            quantity:
              type: integer
              description: The quantity for this price (optional, defaults to RFQ size).
              example: 1000000
          required:
            - price # Price is required if priceDetails object is present

    RfqActionAcknowledgedResponse:
      type: object
      properties:
        message:
          type: string
          example: "RFQ response acknowledged and logged."
        rfqId:
          type: string
          example: "RFQ-a1b2c3d4-e5f6-7890-1234-567890abcdef"
        newStatus:
          type: string
          example: "On the Wire"
        respondingTraderId:
          type: string
          nullable: true
          example: "TRADER_UI_001"
    
    RfqPassActionAcknowledgedResponse: # Slightly different response for pass
      type: object
      properties:
        message:
          type: string
          example: "RFQ pass acknowledged and logged."
        rfqId:
          type: string
          example: "RFQ-a1b2c3d4-e5f6-7890-1234-567890abcdef"
        newStatus:
          type: string
          example: "Passed"
        # respondingTraderId might also be included here if set on pass

    RfqPassActionRequest:
      type: object
      required:
        - traderId
      properties:
        traderId:
          type: string
          description: Identifier of the trader passing on the RFQ.
          example: "TRADER_UI_001"
        reason:
          type: string
          nullable: true
          description: Optional reason for passing.
          example: "No interest"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A message detailing the error.
          example: "RFQ not found."
    
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: "UP"
        timestamp:
          type: string
          format: date-time
          example: "2025-06-01T14:30:00Z"

paths:
  /health:
    get:
      tags:
        - Health
      summary: Check service health
      description: Returns the current operational status of the service.
      operationId: getHealthStatus
      responses:
        '200':
          description: Service is healthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rfqs:
    get:
      tags:
        - RFQs
      summary: List RFQs
      description: Retrieves a list of RFQs, optionally filtered by parameters.
      operationId: listRfqs
      parameters:
        - name: instrumentId
          in: query
          description: Filter RFQs by a specific instrument identifier.
          required: false
          schema:
            type: string
            example: "INST01"
        - name: instrumentCusip
          in: query
          description: Filter RFQs by instrument CUSIP.
          required: false
          schema:
            type: string
            example: "912828ABC"
        - name: instrumentType
          in: query
          description: Filter RFQs by instrument type.
          required: false
          schema:
            type: string
            example: "GovBond"
        # Add other potential filters like status, customerId, venueId, dateRanges if implemented
      responses:
        '200':
          description: A list of RFQs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RFQ'
        '400':
          description: Invalid filter parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rfqs/{rfqId}:
    get:
      tags:
        - RFQs
      summary: Get RFQ by ID
      description: Retrieves a single RFQ by its unique identifier.
      operationId: getRfqById
      parameters:
        - name: rfqId
          in: path
          required: true
          description: ID of the RFQ to retrieve.
          schema:
            type: string
            example: "RFQ-a1b2c3d4-e5f6-7890-1234-567890abcdef"
      responses:
        '200':
          description: Successfully retrieved RFQ details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RFQ'
        '404':
          description: RFQ not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rfqs/{rfqId}/respond:
    post:
      tags:
        - RFQs
      summary: Respond to an RFQ
      description: |-
        Allows a trader to respond to an RFQ by indicating an intent to stream a price or send a fixed price. 
        This action updates the RFQ status to "On the Wire" and logs the interaction.
      operationId: respondToRfq
      parameters:
        - name: rfqId
          in: path
          required: true
          description: ID of the RFQ to respond to.
          schema:
            type: string
            example: "RFQ-a1b2c3d4-e5f6-7890-1234-567890abcdef"
      requestBody:
        description: Details of the response to the RFQ.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RfqResponseActionRequest'
      responses:
        '200':
          description: RFQ response acknowledged.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RfqActionAcknowledgedResponse'
        '400':
          description: Bad request (e.g., missing required fields, RFQ in invalid state).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: RFQ not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rfqs/{rfqId}/pass:
    post:
      tags:
        - RFQs
      summary: Pass on an RFQ
      description: |-
        Allows a trader to pass on an RFQ, indicating no interest in quoting.
        This action updates the RFQ status to "Passed" and logs the interaction.
      operationId: passOnRfq
      parameters:
        - name: rfqId
          in: path
          required: true
          description: ID of the RFQ to pass on.
          schema:
            type: string
            example: "RFQ-a1b2c3d4-e5f6-7890-1234-567890abcdef"
      requestBody:
        description: Details for passing on the RFQ.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RfqPassActionRequest'
      responses:
        '200':
          description: RFQ pass acknowledged.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RfqPassActionAcknowledgedResponse'
        '400':
          description: Bad request (e.g., missing required fields, RFQ in invalid state).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: RFQ not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

